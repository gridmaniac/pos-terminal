---
description:
globs:
alwaysApply: false
---

# Реализация API взаимодействия с KKM Server

Данный проект создается с целью протестировать различные гипотезы во взаимодействии с POS терминалом. В будущем наработки будут перенесены в основное веб-приложение. Далее, по ходу имплеметации описывай весь прогресс кратко в файле `progress.md`.

- Используем nuxt-ui модуль с доступными компонентами для отрисовки UI прототипа
- Проверять работоспособность проекта не нужно, так как в данный момент нет доступа к KKM Server или эмулятору
- GIT на данном этапе не используем
- В ходе реализации предлагаются примеры взаимодействия с API KKM Server на vanilla JS, но мы используем последние лучшие практики и стандарты EcmaScript.
- Среди них: по возможности избегать коллбэки в пользу async/await, использование composables для реиспользуемого кода и типизация через TS, а также встроенный fetch механизм Nuxt.

В данном проекте необходимо реализовать возможность переключения между режимом взаимодействия через Chrome расширение и взаимодействия через http запросы напрямую с KKM Server.

Предусмотреть в UI данный toggle для переключения режимов и указаний endpoint. Имеется примерный список потенциальных эндпоинтов, так что можно реализовать возможность подстановки из возможных. Варианты есть в файле `examples/endpoints.txt`.

## Реализация механизма команд

Судя по документации, взаимодействие с KKM Server осуществляется через ExecuteCommand, описанный в примере `examples/command.txt`. Это хороший старт для построения архитектуры, поэтому стоит изначально хорошо продумать и выбрать оптимальный вариант:
- Использовать данную команду далее по ходу добавления функционала
- Использовать эту команду как низкоуровневый вызов внутри конкретных методов

В UI предусмотреть добавление raw json команды и вызов для отладки.
Выводить в консоль все сырые json команд и ответов для отладки. Также, выводить ошибки.

Также, есть особенность параметра timeout - при передаче в 0 сервер не будет ждать завершения команды и вернет текущий статус. В таком случае команду придется проверять через отдельнкую команду GetRezult (пример в `examples/result.txt`).

После реализации механизма отправки команд и получения ответов, приступим к наращиванию функционала прототипа.


## Открытие/закрытие смен

Судя по рисерчу, я узнал что для работы с терминалом необходимо открывать смену (для проведения финансовых операций с передачей в ОФД).

Примеры с открытием и закрытием смен для нашей реализации берем из `examples/shifts.txt`.

Сделаем это явным в UI.

## Запрос оплаты пользователя

Добавим в UI кнопку, нажатие которой вызывает команду оплаты через терминал.
Пример работы с данной командой берем из `examples/payment.txt`.

Для удобства добавим некоторые UI компоненты с предзаполненными параметрами, которые будут передаваться в команду.

Предусмотреть вариант, что если смена не открыта - эта команда может не выполниться. В таком случае предварительно открываем смену перед вызовом метода оплаты.

## Печать чека с баркодом

Другая кнопка в UI будет использовать те же UI что и для команд оплаты (сумма и другие поля), также будет ориентироваться на открытую смену по аналогии выше. В будущем будет приходить баркод с сервера, но сейчас будем использовать произвольный.

В данной части функционала вызываем печать чека, пример кода берем из `examples/check.txt`.

## Мониторинг терминала

Для проверки связи с KKM сервером есть вариант использовать команду для получения списка устройств. Это также поможет отладить терминал. Предусмотреть UI. Код примера команды взять из файла `examples/list.txt`