// Оплатить платежной картой
function PayByPaymentCard(NumDevice) {
    // Подготовка данных команды
    var Data = {
        // Команда серверу
        Command: "PayByPaymentCard",
        // ИНН для поиска. Если "" то ищется только по NumDevice,
        // Если NumDevice = 0 а InnKkm заполнено то ККМ ищется только по InnKkm
        InnKkm: "",
        // Номер устройства. Если 0 то первое не блокированное на сервере
        // Не рекомендовано для использования. рекомендуем задаваь InnKkm 
        NumDevice: NumDevice,
        // Сумма оплаты
        Amount: 0.01,
        // Уникальный идентификатор команды. Любая строка из 40 символов - должна быть уникальна для каждой подаваемой команды
        // По этому идентификатору можно запросить результат выполнения команды
        // Поле не обязательно
        IdCommand: guid()
    };
    // Вызов команды
    ExecuteCommand(Data);

    // Возвращается JSON:
    //{
    //    "UniversalID": "CN:1254********6845;RN:26;RRN:5486265211;AC:783451264186418", // СОХРАНИТЕ ЭТО ПОЛЕ! Понадобится для отмены или возврата по транзакции
    //    "Amount": 1.02,
    //    "Slip": "====================================\r\nОрганизация:ООО Тестовая организация\r\nИНН: 123456789012\r\nТерминал: 21094544\r\nМерчант: 781000055557\r\n------------------------------------\r\n ОПЛАТА \r\nКарта: Visa Credit\r\nНомер: 1254********6845\r\nСумма (руб): 1,02\r\n------------------------------------\r\nСтатус: Одобрено\r\nКод авторизации: 783451264186418\r\nНомер ссылки: 5486265211\r\nНомер чека: 26\r\n====================================\r\n",
    //    "Command": "PayByPaymentCard",
    //    "Error": "",  // Текст ошибки если была - обязательно показать пользователю - по содержанию ошибки можно в 90% случаях понять как ее устранять
    //    "Status": 0   // Ok = 0, Run(Запущено на выполнение) = 1, Error = 2, NotFound(устройство не найдено) = 3, NotRun = 4
    //    "IdCommand": "9836aa83-6899-aba1-4e3d-7352ea1cf64f",
    //    "NumDevice": 14
    //}
}

// Вернуть платеж по платежной карте
function ReturnPaymentByPaymentCard(NumDevice) {
    // Подготовка данных команды
    var Data = {
        // Команда серверу
        Command: "ReturnPaymentByPaymentCard",
        // ИНН для поиска. Если "" то ищется только по NumDevice,
        // Если NumDevice = 0 а InnKkm заполнено то ККМ ищется только по InnKkm
        InnKkm: "",
        // Номер устройства. Если 0 то первое не блокированное на сервере
        // Не рекомендовано для использования. рекомендуем задаваь InnKkm 
        NumDevice: NumDevice,
        // Сумма оплаты
        Amount: 0.01,
        // Полный банковский идентификатор транзакции, полученный в PayByPaymentCard
        UniversalID: UniversalID,
        // Уникальный идентификатор команды. Любая строка из 40 символов - должна быть уникальна для каждой подаваемой команды
        // По этому идентификатору можно запросить результат выполнения команды
        // Поле не обязательно
        IdCommand: guid()
    };
    // Вызов команды
    ExecuteCommand(Data);

    // Возвращается JSON:
    //{
    //    "UniversalID": "CN:1254********6845;RN:26;RRN:5486265211;AC:783451264186418", 
    //    "Amount": 1.02,
    //    "Slip": "====================================\r\nОрганизация:ООО Тестовая организация\r\nИНН: 123456789012\r\nТерминал: 21094544\r\nМерчант: 781000055557\r\n------------------------------------\r\n ОПЛАТА \r\nКарта: Visa Credit\r\nНомер: 1254********6845\r\nСумма (руб): 1,02\r\n------------------------------------\r\nСтатус: Одобрено\r\nКод авторизации: 783451264186418\r\nНомер ссылки: 5486265211\r\nНомер чека: 26\r\n====================================\r\n",
    //    "Command": "PayByPaymentCard",
    //    "Error": "",  // Текст ошибки если была - обязательно показать пользователю - по содержанию ошибки можно в 90% случаях понять как ее устранять
    //    "Status": 0   // Ok = 0, Run(Запущено на выполнение) = 1, Error = 2, NotFound(устройство не найдено) = 3, NotRun = 4
    //    "IdCommand": "9836aa83-6899-aba1-4e3d-7352ea1cf64f",
    //    "NumDevice": 14
    //}

}

// Отменить платеж по платежной карте
function CancelPaymentByPaymentCard(NumDevice) {
    // Подготовка данных команды
    var Data = {
        // Команда серверу
        Command: "CancelPaymentByPaymentCard",
         // ИНН для поиска. Если "" то ищется только по NumDevice,
        // Если NumDevice = 0 а InnKkm заполнено то ККМ ищется только по InnKkm
        InnKkm: "",
        // Номер устройства. Если 0 то первое не блокированное на сервере
        // Не рекомендовано для использования. рекомендуем задаваь InnKkm 
        NumDevice: NumDevice,
        // Сумма оплаты
        Amount: 0.01,
        // Полный банковский идентификатор транзакции, полученный в PayByPaymentCard
        UniversalID: UniversalID,
        // Уникальный идентификатор команды. Любая строка из 40 символов - должна быть уникальна для каждой подаваемой команды
        // По этому идентификатору можно запросить результат выполнения команды
        // Поле не обязательно
        IdCommand: guid()
    };
    // Вызов команды
    ExecuteCommand(Data);

    // Возвращается JSON:
    //{
    //    "UniversalID": "CN:1254********6845;RN:26;RRN:5486265211;AC:783451264186418", 
    //    "Amount": 1.02,
    //    "Slip": "====================================\r\nОрганизация:ООО Тестовая организация\r\nИНН: 123456789012\r\nТерминал: 21094544\r\nМерчант: 781000055557\r\n------------------------------------\r\n ОПЛАТА \r\nКарта: Visa Credit\r\nНомер: 1254********6845\r\nСумма (руб): 1,02\r\n------------------------------------\r\nСтатус: Одобрено\r\nКод авторизации: 783451264186418\r\nНомер ссылки: 5486265211\r\nНомер чека: 26\r\n====================================\r\n",
    //    "Command": "PayByPaymentCard",
    //    "Error": "",  // Текст ошибки если была - обязательно показать пользователю - по содержанию ошибки можно в 90% случаях понять как ее устранять
    //    "Status": 0   // Ok = 0, Run(Запущено на выполнение) = 1, Error = 2, NotFound(устройство не найдено) = 3, NotRun = 4
    //    "IdCommand": "9836aa83-6899-aba1-4e3d-7352ea1cf64f",
    //    "NumDevice": 14
    //}

}

// Блокировка суммы на счете карты
function AuthorisationByPaymentCard(NumDevice) {
    // Подготовка данных команды
    var Data = {
        // Команда серверу
        Command: "AuthorisationByPaymentCard",
        // ИНН для поиска. Если "" то ищется только по NumDevice,
        // Если NumDevice = 0 а InnKkm заполнено то ККМ ищется только по InnKkm
        InnKkm: "",
        // Номер устройства. Если 0 то первое не блокированное на сервере
        // Не рекомендовано для использования. рекомендуем задаваь InnKkm 
        NumDevice: NumDevice,
        // Сумма оплаты
        Amount: 0.01,
        // Уникальный идентификатор команды. Любая строка из 40 символов - должна быть уникальна для каждой подаваемой команды
        // По этому идентификатору можно запросить результат выполнения команды
        // Поле не обязательно
        IdCommand: guid()
    };
    // Вызов команды
    ExecuteCommand(Data);

    // Возвращается JSON:
    //{
    //    "UniversalID": "CN:1254********6845;RN:26;RRN:5486265211;AC:783451264186418", // СОХРАНИТЕ ЭТО ПОЛЕ! Понадобится для отмены или возврата по транзакции
    //    "Amount": 1.02,
    //    "Slip": "====================================\r\nОрганизация:ООО Тестовая организация\r\nИНН: 123456789012\r\nТерминал: 21094544\r\nМерчант: 781000055557\r\n------------------------------------\r\n ОПЛАТА \r\nКарта: Visa Credit\r\nНомер: 1254********6845\r\nСумма (руб): 1,02\r\n------------------------------------\r\nСтатус: Одобрено\r\nКод авторизации: 783451264186418\r\nНомер ссылки: 5486265211\r\nНомер чека: 26\r\n====================================\r\n",
    //    "Command": "PayByPaymentCard",
    //    "Error": "",  // Текст ошибки если была - обязательно показать пользователю - по содержанию ошибки можно в 90% случаях понять как ее устранять
    //    "Status": 0   // Ok = 0, Run(Запущено на выполнение) = 1, Error = 2, NotFound(устройство не найдено) = 3, NotRun = 4
    //    "IdCommand": "9836aa83-6899-aba1-4e3d-7352ea1cf64f",
    //    "NumDevice": 14
    //}

}

// Списать блокированную сумму со счета карты
function AuthConfirmationByPaymentCard(NumDevice) {
    // Подготовка данных команды
    var Data = {
        // Команда серверу
        Command: "AuthConfirmationByPaymentCard",
        // ИНН для поиска. Если "" то ищется только по NumDevice,
        // Если NumDevice = 0 а InnKkm заполнено то ККМ ищется только по InnKkm
        InnKkm: "",
        // Номер устройства. Если 0 то первое не блокированное на сервере
        // Не рекомендовано для использования. рекомендуем задаваь InnKkm 
        NumDevice: NumDevice,
        // Сумма оплаты
        Amount: 0.01,
        // Полный банковский идентификатор транзакции, полученный в AuthorisationByPaymentCard
        UniversalID: UniversalID,
        // Уникальный идентификатор команды. Любая строка из 40 символов - должна быть уникальна для каждой подаваемой команды
        // По этому идентификатору можно запросить результат выполнения команды
        // Поле не обязательно
        IdCommand: guid()
    };
    // Вызов команды
    ExecuteCommand(Data);

    // Возвращается JSON:
    //{
    //    "UniversalID": "CN:1254********6845;RN:26;RRN:5486265211;AC:783451264186418", 
    //    "Amount": 1.02,
    //    "Slip": "====================================\r\nОрганизация:ООО Тестовая организация\r\nИНН: 123456789012\r\nТерминал: 21094544\r\nМерчант: 781000055557\r\n------------------------------------\r\n ОПЛАТА \r\nКарта: Visa Credit\r\nНомер: 1254********6845\r\nСумма (руб): 1,02\r\n------------------------------------\r\nСтатус: Одобрено\r\nКод авторизации: 783451264186418\r\nНомер ссылки: 5486265211\r\nНомер чека: 26\r\n====================================\r\n",
    //    "Command": "PayByPaymentCard",
    //    "Error": "",  // Текст ошибки если была - обязательно показать пользователю - по содержанию ошибки можно в 90% случаях понять как ее устранять
    //    "Status": 0   // Ok = 0, Run(Запущено на выполнение) = 1, Error = 2, NotFound(устройство не найдено) = 3, NotRun = 4
    //    "IdCommand": "9836aa83-6899-aba1-4e3d-7352ea1cf64f",
    //    "NumDevice": 14
    //}


}

// Разблокировать сумму на счете карты
function CancelAuthorisationByPaymentCard(NumDevice) {
    // Подготовка данных команды
    var Data = {
        // Команда серверу
        Command: "CancelAuthorisationByPaymentCard",
        // ИНН для поиска. Если "" то ищется только по NumDevice,
        // Если NumDevice = 0 а InnKkm заполнено то ККМ ищется только по InnKkm
        InnKkm: "",
        // Номер устройства. Если 0 то первое не блокированное на сервере
        // Не рекомендовано для использования. рекомендуем задаваь InnKkm 
        NumDevice: NumDevice,
        // Сумма оплаты
        Amount: 0.01,
        // Полный банковский идентификатор транзакции, полученный в AuthorisationByPaymentCard
        UniversalID: UniversalID,
        // Уникальный идентификатор команды. Любая строка из 40 символов - должна быть уникальна для каждой подаваемой команды
        // По этому идентификатору можно запросить результат выполнения команды
        // Поле не обязательно
        IdCommand: guid()
    };
    // Вызов команды
    ExecuteCommand(Data);

    // Возвращается JSON:
    //{
    //    "UniversalID": "CN:1254********6845;RN:26;RRN:5486265211;AC:783451264186418", 
    //    "Amount": 1.02,
    //    "Slip": "====================================\r\nОрганизация:ООО Тестовая организация\r\nИНН: 123456789012\r\nТерминал: 21094544\r\nМерчант: 781000055557\r\n------------------------------------\r\n ОПЛАТА \r\nКарта: Visa Credit\r\nНомер: 1254********6845\r\nСумма (руб): 1,02\r\n------------------------------------\r\nСтатус: Одобрено\r\nКод авторизации: 783451264186418\r\nНомер ссылки: 5486265211\r\nНомер чека: 26\r\n====================================\r\n",
    //    "Command": "PayByPaymentCard",
    //    "Error": "",  // Текст ошибки если была - обязательно показать пользователю - по содержанию ошибки можно в 90% случаях понять как ее устранять
    //    "Status": 0   // Ok = 0, Run(Запущено на выполнение) = 1, Error = 2, NotFound(устройство не найдено) = 3, NotRun = 4
    //    "IdCommand": "9836aa83-6899-aba1-4e3d-7352ea1cf64f",
    //    "NumDevice": 14
    //}

}
    
// Аварийная отмена операции (Метод отменяет последнюю транзакцию)
function EmergencyReversal(NumDevice) {
    // Подготовка данных команды
    var Data = {
        // Команда серверу
        Command: "EmergencyReversal",
        // ИНН для поиска. Если "" то ищется только по NumDevice,
        // Если NumDevice = 0 а InnKkm заполнено то ККМ ищется только по InnKkm
        InnKkm: "",
        // Номер устройства. Если 0 то первое не блокированное на сервере
        // Не рекомендовано для использования. рекомендуем задаваь InnKkm 
        NumDevice: NumDevice,
        // Полный банковский идентификатор транзакции, полученный в PayByPaymentCard
        UniversalID: UniversalID,
        // Уникальный идентификатор команды. Любая строка из 40 символов - должна быть уникальна для каждой подаваемой команды
        // По этому идентификатору можно запросить результат выполнения команды
        // Поле не обязательно
        IdCommand: guid()
    };
    // Вызов команды
    ExecuteCommand(Data);

    // Возвращается JSON:
    //{
    //    "UniversalID": "CN:1254********6845;RN:26;RRN:5486265211;AC:783451264186418", 
    //    "Amount": 1.02,
    //    "Slip": "====================================\r\nОрганизация:ООО Тестовая организация\r\nИНН: 123456789012\r\nТерминал: 21094544\r\nМерчант: 781000055557\r\n------------------------------------\r\n ОПЛАТА \r\nКарта: Visa Credit\r\nНомер: 1254********6845\r\nСумма (руб): 1,02\r\n------------------------------------\r\nСтатус: Одобрено\r\nКод авторизации: 783451264186418\r\nНомер ссылки: 5486265211\r\nНомер чека: 26\r\n====================================\r\n",
    //    "Command": "PayByPaymentCard",
    //    "Error": "",  // Текст ошибки если была - обязательно показать пользователю - по содержанию ошибки можно в 90% случаях понять как ее устранять
    //    "Status": 0   // Ok = 0, Run(Запущено на выполнение) = 1, Error = 2, NotFound(устройство не найдено) = 3, NotRun = 4
    //    "IdCommand": "9836aa83-6899-aba1-4e3d-7352ea1cf64f",
    //    "NumDevice": 14
    //}

}

// Закрыть смену по картам
function Settlement(NumDevice) {
    // Подготовка данных команды
    var Data = {
        // Команда серверу
        Command: "Settlement",
        // ИНН для поиска. Если "" то ищется только по NumDevice,
        // Если NumDevice = 0 а InnKkm заполнено то ККМ ищется только по InnKkm
        InnKkm: "",
        // Номер устройства. Если 0 то первое не блокированное на сервере
        // Не рекомендовано для использования. рекомендуем задаваь InnKkm 
        NumDevice: NumDevice,
        // Уникальный идентификатор команды. Любая строка из 40 символов - должна быть уникальна для каждой подаваемой команды
        // По этому идентификатору можно запросить результат выполнения команды
        // Поле не обязательно
        IdCommand: guid()
    };
    // Вызов команды
    ExecuteCommand(Data);
}

// Получить итоги дня по картам
function TerminalReport(NumDevice) {
    // Подготовка данных команды
    var Data = {
        // Команда серверу
        Command: "TerminalReport",
        // ИНН для поиска. Если "" то ищется только по NumDevice,
        // Если NumDevice = 0 а InnKkm заполнено то ККМ ищется только по InnKkm
        InnKkm: "",
        // Номер устройства. Если 0 то первое не блокированное на сервере
        // Не рекомендовано для использования. рекомендуем задаваь InnKkm 
        NumDevice: NumDevice,
        // Краткий (false) или полный (true) отчет
        Detailed: Detailed,
        // Уникальный идентификатор команды. Любая строка из 40 символов - должна быть уникальна для каждой подаваемой команды
        // По этому идентификатору можно запросить результат выполнения команды
        // Поле не обязательно
        IdCommand: guid()
    };
    // Вызов команды
    ExecuteCommand(Data);
}

// Получить копию слип-чека
function TransactionDetails(NumDevice) {
    // Подготовка данных команды
    var Data = {
        // Команда серверу
        Command: "TransactionDetails",
        // ИНН для поиска. Если "" то ищется только по NumDevice,
        // Если NumDevice = 0 а InnKkm заполнено то ККМ ищется только по InnKkm
        InnKkm: "",
        // Номер устройства. Если 0 то первое не блокированное на сервере
        // Не рекомендовано для использования. рекомендуем задаваь InnKkm 
        NumDevice: NumDevice,
         // Номер Карты / Данные карты - если карта считывается устройством то не заполняется
        CardNumber: Old_CardNumber,
        // Сумма оплаты
        Amount: 0.01,
        // Номер чека
        ReceiptNumber: "TEST-01",
        // Уникальный код транзакции RRN который был получен при блокировки суммы на счете карты
        RRNCode: Old_RRNCode,
        // Код авторизации транзакции который был получен при блокировки суммы на счете карты
        AuthorizationCode: Old_AuthorizationCode,
        // Уникальный идентификатор команды. Любая строка из 40 символов - должна быть уникальна для каждой подаваемой команды
        // По этому идентификатору можно запросить результат выполнения команды
        // Поле не обязательно
        IdCommand: guid()
    };
    // Вызов команды
    ExecuteCommand(Data);
}

// Есть ли печать квитанций на терминале?
function PrintSlipOnTerminal(NumDevice) {
    // Подготовка данных команды
    var Data = {
        // Команда серверу
        Command: "PrintSlipOnTerminal",
        // ИНН для поиска. Если "" то ищется только по NumDevice,
        // Если NumDevice = 0 а InnKkm заполнено то ККМ ищется только по InnKkm
        InnKkm: "",
        // Номер устройства. Если 0 то первое не блокированное на сервере
        // Не рекомендовано для использования. рекомендуем задаваь InnKkm 
        NumDevice: NumDevice,
        // Уникальный идентификатор команды. Любая строка из 40 символов - должна быть уникальна для каждой подаваемой команды
        // По этому идентификатору можно запросить результат выполнения команды
        // Поле не обязательно
        IdCommand: guid()
    };
    // Вызов команды
    ExecuteCommand(Data);
}

//----------------------------------------------------------------------------------------
// Пример асинхронного запроса для интерактивного ввода данных на сервере 
// Рекомендуется как основной способ работы с эквайринговыми терминалами (или с другим оборудованием с интерактивным вводом данных)
var CounGetRezult;
// Оплатить платежной картой
function PayByPaymentCardAsync(NumDevice) {
    CounGetRezult = 0;
    // Генерация уникального идентификатора команды
    IdCommand = guid();
    // Подготовка данных команды
    var Data = {
        // Уникальный идентификатор команды. Любая строка из 40 символов - должна быть уникальна для каждой подаваемой команды
        IdCommand: IdCommand,
        // Команда серверу
        Command: "PayByPaymentCard",
        // Номер устройства. Если 0 то первое не блокированное на сервере
        NumDevice: NumDevice,
        // Номер Карты / Данные карты - если карта считывается устройством то не заполняется
        CardNumber: "",
        // Сумма оплаты
        Amount: 0.01,
        // Номер чека
        ReceiptNumber: "TEST-01",
        // Уникальный идентификатор команды. Любая строка из 40 символов - должна быть уникальна для каждой подаваемой команды
        // По этому идентификатору можно запросить результат выполнения команды
        // Поле не обязательно
        IdCommand: guid(),
        // Время (сек) ожидания выполнения команды. 
        //Если За это время команда не выполнилась в статусе вернется результат "NotRun" или "Run"
        //Проверить результат еще не выполненной команды можно командой "GetRezult" 
        //Если не указано или 0 - то значение по умолчанию 60 сек.
        // Поле не обязательно. Это поле можно указывать во всех командах 
        Timeout: 1  //Асинхронный вызов без ожидания выполнения

    };
    // Вызов команды
    // первый параметр true! это значит что серевр не будет ожидать завершения выполнения команды и сразу отдаст поток со страусом 1 - Run
    ExecuteCommand(Data, SetRezult);
}

// Асинхронная проверка выполнения команды!!
function SetRezult(Rezult, textStatus, jqX) {
    // Эта функция вызывается при успешном запросе
    // Rezult.Status - Статус выполнения команды
    //      Ok = 0,         - выполнено без ошибок
    //      Run = 1,        - команда запущена на выполнение но еще не выполнена
    //      Error = 2,      - команда выполнена, есть ошибка
    //      NotFound = 3,   - не найдена ранее запущенная команда команда (для асинхронного режима при выполнении команды GetRezult)
    //      NotRun = 4      - команда еще не запущена на выполнение (ожидание готовности устройства)
    if (Rezult.Status == 1 || Rezult.Status == 4) { // значит команда еще выполняется или еще не запустилась
        //Вывод данных что результат еще не выполнен
        CounGetRezult = CounGetRezult + 1;
        $("#MessageStatus").text("Выполняется: Запрос №:" + CounGetRezult);
        // Заново запрашиваем результат выполнения команды
        var Data = {
            // Команда серверу - запрос выполнения команды
            Command: "GetRezult",
            // Уникальный идентификатор ранее поданной команды
            IdCommand: IdCommand,
        };
        // Вызываем запрос на получение результата с задержкой 2 секунды
        setTimeout(function () { ExecuteCommand(Data, SetRezult, null, null, false) }, 1000);
    } else { // Rezult.Status <> 1 - значит команда уже выполнена
        // Вывод результата выполнения команды
        ExecuteSuccess(Rezult, textStatus, null);
    }
};