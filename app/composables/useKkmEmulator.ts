/**
 * –≠–º—É–ª—è—Ç–æ—Ä KKM Server –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 */

import type { KkmCommand, KkmResponse } from './useKkmServer'
import type { ListResponse, ShiftResponse, PaymentResponse, DeviceInfo } from './useKkmCommands'

export const useKkmEmulator = () => {
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
  const delay = (ms: number = 500) => new Promise(resolve => setTimeout(resolve, ms))

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock –¥–∞–Ω–Ω—ã—Ö
  const generateMockDeviceList = (): DeviceInfo[] => {
    return [
      {
        NumDevice: 1,
        IdDevice: "6a6151a5-b352-485c-8f01-45da05d3df18",
        OnOf: true,
        Active: true,
        TypeDevice: "–§–∏—Å–∫–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        IdTypeDevice: "KkmStrihM",
        IP: "192.168.1.100",
        NameDevice: "–®–¢–†–ò–•-–ú-–ü–¢–ö",
        KktNumber: "123456789",
        INN: "123456789012",
        TaxVariant: "–û–°–ù",
        AddDate: new Date().toISOString(),
        OFD_Error: "",
        OFD_NumErrorDoc: 0,
        OFD_DateErrorDoc: "0001-01-01T00:00:00",
        FN_DateEnd: "2025-12-31T23:59:59",
        FN_MemOverflowl: false,
        FN_IsFiscal: true,
        PaperOver: false
      },
      {
        NumDevice: 2,
        IdDevice: "7b7252b6-c463-596d-9g12-56eb16e4eg29",
        OnOf: true,
        Active: false,
        TypeDevice: "–ü–ª–∞—Ç–µ–∂–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª",
        IdTypeDevice: "PaymentTerminal",
        IP: "192.168.1.101",
        NameDevice: "–≠–∫–≤–∞–π—Ä–∏–Ω–≥–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª",
        KktNumber: "",
        INN: "",
        TaxVariant: "",
        AddDate: new Date().toISOString(),
        OFD_Error: "",
        OFD_NumErrorDoc: 0,
        OFD_DateErrorDoc: "0001-01-01T00:00:00",
        FN_DateEnd: "0001-01-01T00:00:00",
        FN_MemOverflowl: false,
        FN_IsFiscal: false,
        PaperOver: false
      }
    ]
  }

  // –≠–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
  const emulateCommand = async (command: KkmCommand): Promise<KkmResponse> => {
    await delay(Math.random() * 1000 + 500) // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 500-1500ms

    console.log('üé≠ –≠–º—É–ª—è—Ç–æ—Ä: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã', command.Command)

    switch (command.Command) {
      case 'List':
        return emulateListCommand(command)
      
      case 'OpenShift':
        return emulateOpenShiftCommand(command)
      
      case 'CloseShift':
        return emulateCloseShiftCommand(command)
      
      case 'PayByPaymentCard':
        return emulatePaymentCommand(command)
      
      case 'ReturnPaymentByPaymentCard':
        return emulateReturnPaymentCommand(command)
      
      case 'CancelPaymentByPaymentCard':
        return emulateCancelPaymentCommand(command)
      
      case 'RegisterCheck':
        return emulateRegisterCheckCommand(command)
      
      case 'GetRezult':
        return emulateGetResultCommand(command)
      
      default:
        return {
          Status: 0,
          Error: '',
          Message: `–ö–æ–º–∞–Ω–¥–∞ ${command.Command} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (—ç–º—É–ª—è—Ü–∏—è)`,
          Command: command.Command,
          IdCommand: command.IdCommand
        }
    }
  }

  // –≠–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã List
  const emulateListCommand = (command: KkmCommand): ListResponse => {
    const devices = generateMockDeviceList()
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    const filteredDevices = devices.filter(device => {
      if (command.NumDevice && command.NumDevice !== 0 && device.NumDevice !== command.NumDevice) {
        return false
      }
      if (command.Active !== undefined && device.Active !== command.Active) {
        return false
      }
      if (command.OnOff !== undefined && device.OnOf !== command.OnOff) {
        return false
      }
      return true
    })

    return {
      Status: 0,
      Error: '',
      Message: '',
      Command: 'List',
      ListUnit: filteredDevices
    }
  }

  // –≠–º—É–ª—è—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
  const emulateOpenShiftCommand = (command: KkmCommand): ShiftResponse => {
    const isError = Math.random() < 0.1 // 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏

    if (isError) {
      return {
        Status: 2,
        Error: '–°–º–µ–Ω–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞',
        Command: 'OpenShift',
        IdCommand: command.IdCommand
      }
    }

    return {
      Status: 0,
      Error: '',
      Message: '–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞',
      Command: 'OpenShift',
      CheckNumber: Math.floor(Math.random() * 1000) + 1,
      SessionNumber: Math.floor(Math.random() * 100) + 1,
      QRCode: `t=${new Date().toISOString().replace(/[-:]/g, '').split('.')[0]}&s=0.00&fn=9999078900002838&i=${Math.floor(Math.random() * 1000)}&fp=${Math.floor(Math.random() * 999999999)}`,
      IdCommand: command.IdCommand,
      NumDevice: command.NumDevice || 1
    }
  }

  // –≠–º—É–ª—è—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã
  const emulateCloseShiftCommand = (command: KkmCommand): ShiftResponse => {
    const isError = Math.random() < 0.1 // 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏

    if (isError) {
      return {
        Status: 2,
        Error: '–°–º–µ–Ω–∞ –Ω–µ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞',
        Command: 'CloseShift',
        IdCommand: command.IdCommand
      }
    }

    return {
      Status: 0,
      Error: '',
      Message: '–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞',
      Command: 'CloseShift',
      CheckNumber: Math.floor(Math.random() * 1000) + 1,
      SessionNumber: Math.floor(Math.random() * 100) + 1,
      QRCode: `t=${new Date().toISOString().replace(/[-:]/g, '').split('.')[0]}&s=0.00&fn=9999078900002838&i=${Math.floor(Math.random() * 1000)}&fp=${Math.floor(Math.random() * 999999999)}`,
      IdCommand: command.IdCommand,
      NumDevice: command.NumDevice || 1
    }
  }

  // –≠–º—É–ª—è—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞
  const emulatePaymentCommand = (command: KkmCommand): PaymentResponse => {
    const isError = Math.random() < 0.15 // 15% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏

    if (isError) {
      const errors = [
        '–ö–∞—Ä—Ç–∞ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è',
        '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –±–∞–Ω–∫–æ–º',
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
        '–¢–µ—Ä–º–∏–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      ]
      const randomError = errors[Math.floor(Math.random() * errors.length)]!

      return {
        Status: 2,
        Error: randomError,
        Command: 'PayByPaymentCard',
        IdCommand: command.IdCommand,
        NumDevice: command.NumDevice || 1
      }
    }

    const cardNumber = `1254********${Math.floor(Math.random() * 9000) + 1000}`
    const rrn = Math.floor(Math.random() * 9000000000) + 1000000000
    const authCode = Math.floor(Math.random() * 900000) + 100000

    return {
      Status: 0,
      Error: '',
      Message: '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      Command: 'PayByPaymentCard',
      UniversalID: `CN:${cardNumber};RN:${Math.floor(Math.random() * 100)};RRN:${rrn};AC:${authCode}`,
      Amount: command.Amount as number,
      Slip: `====================================\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: –û–û–û –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è\n–ò–ù–ù: 123456789012\n–¢–µ—Ä–º–∏–Ω–∞–ª: 21094544\n–ú–µ—Ä—á–∞–Ω—Ç: 781000055557\n------------------------------------\n –û–ü–õ–ê–¢–ê \n–ö–∞—Ä—Ç–∞: Visa Credit\n–ù–æ–º–µ—Ä: ${cardNumber}\n–°—É–º–º–∞ (—Ä—É–±): ${command.Amount}\n------------------------------------\n–°—Ç–∞—Ç—É—Å: –û–¥–æ–±—Ä–µ–Ω–æ\n–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authCode}\n–ù–æ–º–µ—Ä —Å—Å—ã–ª–∫–∏: ${rrn}\n–ù–æ–º–µ—Ä —á–µ–∫–∞: ${Math.floor(Math.random() * 100)}\n====================================`,
      IdCommand: command.IdCommand,
      NumDevice: command.NumDevice || 1
    }
  }

  // –≠–º—É–ª—è—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞
  const emulateReturnPaymentCommand = (command: KkmCommand): PaymentResponse => {
    return {
      Status: 0,
      Error: '',
      Message: '–í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      Command: 'ReturnPaymentByPaymentCard',
      UniversalID: command.UniversalID as string,
      Amount: command.Amount as number,
      Slip: '–ß–µ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞...',
      IdCommand: command.IdCommand,
      NumDevice: command.NumDevice || 1
    }
  }

  // –≠–º—É–ª—è—Ü–∏—è –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞
  const emulateCancelPaymentCommand = (command: KkmCommand): PaymentResponse => {
    return {
      Status: 0,
      Error: '',
      Message: '–û—Ç–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
      Command: 'CancelPaymentByPaymentCard',
      UniversalID: command.UniversalID as string,
      Amount: command.Amount as number,
      Slip: '–ß–µ–∫ –æ—Ç–º–µ–Ω—ã...',
      IdCommand: command.IdCommand,
      NumDevice: command.NumDevice || 1
    }
  }

  // –≠–º—É–ª—è—Ü–∏—è –ø–µ—á–∞—Ç–∏ —á–µ–∫–∞
  const emulateRegisterCheckCommand = (command: KkmCommand): KkmResponse => {
    const isError = Math.random() < 0.05 // 5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏

    if (isError) {
      return {
        Status: 2,
        Error: '–ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –±—É–º–∞–≥–∞ –≤ –ø—Ä–∏–Ω—Ç–µ—Ä–µ',
        Command: 'RegisterCheck',
        IdCommand: command.IdCommand
      }
    }

    return {
      Status: 0,
      Error: '',
      Message: '–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω',
      Command: 'RegisterCheck',
      CheckNumber: Math.floor(Math.random() * 1000) + 1,
      SessionNumber: Math.floor(Math.random() * 100) + 1,
      SessionCheckNumber: Math.floor(Math.random() * 50) + 1,
      URL: 'https://ofd-ya.ru/getFiscalDoc?kktRegId=0000000000061716&fiscalSign=839499349',
      QRCode: `t=${new Date().toISOString().replace(/[-:]/g, '').split('.')[0]}&s=${command.Cash || 0}&fn=9999078900002838&i=${Math.floor(Math.random() * 1000)}&fp=${Math.floor(Math.random() * 999999999)}`,
      Cash: command.Cash || 0,
      ElectronicPayment: command.ElectronicPayment || 0,
      AdvancePayment: 0,
      Credit: 0,
      CashProvision: 0,
      IdCommand: command.IdCommand,
      NumDevice: command.NumDevice || 1
    }
  }

  // –≠–º—É–ª—è—Ü–∏—è GetResult
  const emulateGetResultCommand = (command: KkmCommand): KkmResponse => {
    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    return {
      Status: 3,
      Error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
      Command: 'GetRezult',
      IdCommand: command.IdCommand
    }
  }

  // –≠–º—É–ª—è—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  const emulateAsyncCommand = async (command: KkmCommand): Promise<KkmResponse> => {
    // –°–Ω–∞—á–∞–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
    const initialResponse: KkmResponse = {
      Status: 1, // Run
      Error: '',
      Message: '–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ',
      Command: command.Command,
      IdCommand: command.IdCommand
    }

    // –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    setTimeout(async () => {
      const finalResponse = await emulateCommand(command)
      console.log('üé≠ –≠–º—É–ª—è—Ç–æ—Ä: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', finalResponse)
    }, 3000)

    return initialResponse
  }

  return {
    emulateCommand,
    emulateAsyncCommand,
    generateMockDeviceList
  }
}