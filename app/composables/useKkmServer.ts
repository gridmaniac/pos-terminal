/**
 * Composable –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å KKM Server API
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ KKM Server
 */

export interface KkmCommand {
  Command: string
  IdCommand?: string
  NumDevice?: number
  InnKkm?: string
  TaxVariant?: string
  Timeout?: number
  [key: string]: unknown
}

export interface KkmResponse {
  Status: number
  Error: string
  Message?: string
  Command?: string
  IdCommand?: string
  NumDevice?: number
  [key: string]: unknown
}

export interface KkmConnectionMode {
  mode: 'AddIn' | 'HTTP'
  endpoint?: string
}

// –°—Ç–∞—Ç—É—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
export const KkmStatus = {
  Ok: 0,           // –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –±–µ–∑ –æ—à–∏–±–æ–∫
  Run: 1,          // –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
  Error: 2,        // –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –µ—Å—Ç—å –æ—à–∏–±–∫–∞
  NotFound: 3,     // –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–∞–Ω–µ–µ –∑–∞–ø—É—â–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (–¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
  NotRun: 4        // –∫–æ–º–∞–Ω–¥–∞ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
} as const

export const useKkmServer = () => {
  // –ö–ª—é—á–∏ –¥–ª—è localStorage
  const STORAGE_KEY_MODE = 'kkm-connection-mode'
  const STORAGE_KEY_ENDPOINT = 'kkm-connection-endpoint'

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ localStorage
  const loadConnectionSettings = (): KkmConnectionMode => {
    if (typeof window === 'undefined') {
      return { mode: 'HTTP', endpoint: 'http://localhost:5893/' }
    }

    const savedMode = localStorage.getItem(STORAGE_KEY_MODE) as 'AddIn' | 'HTTP' | null
    const savedEndpoint = localStorage.getItem(STORAGE_KEY_ENDPOINT)

    return {
      mode: savedMode || 'HTTP',
      endpoint: savedEndpoint || 'http://localhost:5893/'
    }
  }

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const connectionMode = ref<KkmConnectionMode>(loadConnectionSettings())

  const user = ref('')
  const password = ref('')

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è GUID —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  const generateGuid = (): string => {
    function S4() {
      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1)
    }
    return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4())
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  const isAddInAvailable = (): boolean => {
    try {
      // @ts-expect-error - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é KkmServer –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
      return typeof KkmServer !== 'undefined'
    } catch {
      return false
    }
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (–∞–Ω–∞–ª–æ–≥ ExecuteCommand –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤)
  const executeCommand = async (
    data: KkmCommand,
    timeout: number = 60000
  ): Promise<KkmResponse> => {
    // –î–æ–±–∞–≤–ª—è–µ–º IdCommand –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if (!data.IdCommand) {
      data.IdCommand = generateGuid()
    }

    console.log('‚Üí –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ KKM Server:', JSON.stringify(data, null, 2))

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (connectionMode.value.mode === 'AddIn') {
      return executeViaAddIn(data)
    } else {
      return executeViaHttp(data, timeout)
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
  const executeViaAddIn = async (data: KkmCommand): Promise<KkmResponse> => {
    try {
      if (!isAddInAvailable()) {
        throw new Error('KKM Server AddIn –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω')
      }

      return new Promise((resolve, reject) => {
        const executeSuccess = (result: KkmResponse) => {
          console.log('‚Üê –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:', JSON.stringify(result, null, 2))
          resolve(result)
        }

        const executeError = (error: string) => {
          reject(new Error(`–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: ${error}`))
        }

        // @ts-expect-error - window.KkmServer –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞
        window.KkmServer.Execute(executeSuccess, data, executeError)
      })
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: ${error}`)
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ HTTP (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
  const executeViaHttp = async (
    data: KkmCommand, 
    timeout: number = 60000
  ): Promise<KkmResponse> => {
    if (!connectionMode.value.endpoint) {
      throw new Error('–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω')
    }

    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º—É–ª—è—Ç–æ—Ä
    if (import.meta.dev) {
      console.log('üé≠ –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º—É–ª—è—Ç–æ—Ä KKM Server')
      const { emulateCommand } = useKkmEmulator()
      return emulateCommand(data)
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const baseUrl = connectionMode.value.endpoint.endsWith('/') 
      ? connectionMode.value.endpoint 
      : connectionMode.value.endpoint + '/'
    
    const url = baseUrl + 'Execute'

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers: HeadersInit = {
      'Content-Type': 'application/json; charset=UTF-8'
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if (user.value || password.value) {
      const credentials = btoa(`${user.value}:${password.value}`)
      headers['Authorization'] = `Basic ${credentials}`
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç —á—É—Ç—å –±–æ–ª—å—à–µ —á–µ–º –≤ –∫–æ–º–∞–Ω–¥–µ
    let requestTimeout = timeout
    if (data.Timeout && data.Timeout > 60) {
      requestTimeout = (data.Timeout + 20) * 1000
    }

    try {
      const controller = new AbortController()
      const timeoutId = setTimeout(() => controller.abort(), requestTimeout)

      const response = await fetch(url, {
        method: 'POST',
        mode: 'cors',
        cache: 'no-cache',
        headers,
        redirect: 'follow',
        referrerPolicy: 'no-referrer',
        body: JSON.stringify(data),
        signal: controller.signal
      })

      clearTimeout(timeoutId)

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }

      const result: KkmResponse = await response.json()
      
      console.log('‚Üê –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç KKM Server:', JSON.stringify(result, null, 2))
      
      return result
      
    } catch (error) {
      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          throw new Error(`–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (${requestTimeout}ms)`)
        }
        
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ dev —Ä–µ–∂–∏–º–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —ç–º—É–ª—è—Ç–æ—Ä
        if (import.meta.dev && (error.message.includes('fetch') || error.message.includes('network'))) {
          console.log('üé≠ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —ç–º—É–ª—è—Ç–æ—Ä')
          const { emulateCommand } = useKkmEmulator()
          return emulateCommand(data)
        }
        
        throw new Error(`–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`)
      }
      throw error
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (GetResult)
  const getResult = async (idCommand: string): Promise<KkmResponse> => {
    const data: KkmCommand = {
      Command: "GetRezult", // –ò–º–µ–Ω–Ω–æ "GetRezult" —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      IdCommand: idCommand
    }

    return executeCommand(data)
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
  const executeCommandWithPolling = async (
    data: KkmCommand,
    maxAttempts: number = 30,
    pollInterval: number = 2000
  ): Promise<KkmResponse> => {
    const result = await executeCommand(data)

    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å—Ä–∞–∑—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (result.Status === KkmStatus.Ok || result.Status === KkmStatus.Error) {
      return result
    }

    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞–µ–º polling
    if (result.Status === KkmStatus.Run || result.Status === KkmStatus.NotRun) {
      if (!result.IdCommand) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç IdCommand –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞')
      }

      console.log(`–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º polling (IdCommand: ${result.IdCommand})`)

      for (let attempt = 1; attempt <= maxAttempts; attempt++) {
        await new Promise(resolve => setTimeout(resolve, pollInterval))
        
        console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts}: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–∞–Ω–¥—ã`)
        
        const pollResult = await getResult(result.IdCommand)
        
        if (pollResult.Status === KkmStatus.Ok || pollResult.Status === KkmStatus.Error) {
          return pollResult
        }
        
        if (pollResult.Status === KkmStatus.NotFound) {
          throw new Error('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ')
        }
      }

      throw new Error(`–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫)`)
    }

    return result
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
  const getStatusText = (status: number): string => {
    switch (status) {
      case KkmStatus.Ok:
        return '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
      case KkmStatus.Run:
        return '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
      case KkmStatus.Error:
        return '–û—à–∏–±–∫–∞'
      case KkmStatus.NotFound:
        return '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'
      case KkmStatus.NotRun:
        return '–ù–µ –∑–∞–ø—É—â–µ–Ω–æ'
      default:
        return `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${status}`
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const setConnection = (mode: 'AddIn' | 'HTTP', endpoint?: string) => {
    connectionMode.value = {
      mode,
      endpoint: mode === 'HTTP' ? endpoint : undefined
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    if (typeof window !== 'undefined') {
      localStorage.setItem(STORAGE_KEY_MODE, mode)
      if (mode === 'HTTP' && endpoint) {
        localStorage.setItem(STORAGE_KEY_ENDPOINT, endpoint)
      }
    }
  }

  const setCredentials = (username: string, userPassword: string) => {
    user.value = username
    password.value = userPassword
  }

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    connectionMode: readonly(connectionMode),
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    executeCommand,
    executeCommandWithPolling,
    getResult,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    generateGuid,
    getStatusText,
    isAddInAvailable,
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    setConnection,
    setCredentials,
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    KkmStatus
  }
}